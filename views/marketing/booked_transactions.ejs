<!-- views/marketing/booked_transactions.ejs -->

<div class="content">
    <form action="">
        <div class="modal" id="myModal" style="height: 100vh; width: 100%;">
            <div class="modal-dialog  modal-lg" style="width: 100% !important;">
                <div class="modal-content">
    
                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Booked Transaction</h4>
                    <button type="button" class="close btn btn-danger" data-dismiss="modal">&times;</button>
                </div>
    
                <!-- Modal Body -->
                <div class="modal-body">
                    <div class="row d-flex gap-3 flex-wrap mb-3">
                        <div class="col">
                            <label for="haulingDate">
                                <i class="fa-solid fa-calendar-days"></i>
                                Hauling Date
                            </label><br>
                            <input type="date" name="haulingDate" id="haulingDate" autocomplete="off" class="form-control" required readonly>
                        </div>
                        <div class="col">
                            <label for="haulingTime">
                                <i class="fa-regular fa-clock"></i>
                                Hauling Time
                            </label><br>
                            <input type="time" name="haulingTime" id="haulingTime" autocomplete="off" class="form-control" required>
                        </div>
                    </div>
                    <div class="row d-flex gap-3 flex-wrap mb-3">
                        <div class="col">
                            <label for="client">
                                <i class="fa-solid fa-user"></i>
                                Client
                            </label><br>
                            <input class="form-control" list="clientList" id="clientName" name="clientName" autocomplete="off" required placeholder="Type to search Client" onchange="updateClientId()">
                            <input type="hidden" id="clientId" name="clientId">
                            <datalist id="clientList">
                                <option value="" disabled selected>Select Client</option>
                                <% clients.forEach(client => { %>
                                    <option value="<%= client.clientName %>" data-clientId="<%= client.clientId %>"><%= client.clientName %></option>
                                <% }); %>
                            </datalist>
                        </div>
                    </div>
                    <div class="row d-flex gap-3 flex-wrap mb-3">
                        <div class="col">
                            <label for="submit_to">
                                <i class="fa-solid fa-arrow-up-right-from-square"></i>
                                Submit To
                            </label><br>
                            <select name="submit_to" id="submit_to" class="form-control" required>
                                <option value="" disabled selected>SELECT</option>
                                <option value="LOGISTICS">LOGISTICS</option>
                                <option value="RECEIVING">RECEIVING</option>
                            </select>
                        </div>
                        <div class="col">
                            <label for="type_of_waste">
                                <i class="fa-solid fa-trash-can"></i>
                                Type of Waste
                            </label><br>
                            <input class="form-control" list="QuotationWasteList" id="wasteName" name="wasteName" autocomplete="off" required placeholder="Type to search Type of Waste..." onchange="updateWasteId()">
                            <input type="hidden" id="wasteId" name="wasteId">
                            <datalist id="QuotationWasteList"></datalist>
                        </div>
                    </div>
                    <div class="row gap-3 mb-3 flex-wrap" id="type_of_vehicle_row" style="display: none;">
                        <div class="col">
                            <label for="type_of_vehicle1">
                                <i class="fa-solid fa-truck"></i>
                                Type of Vehicle 1
                            </label>
                            <input class="form-control" list="QuotationTransportationList" id="typeOfVehicle" name="typeOfVehicle" autocomplete="off" required placeholder="Type to search Type of Vehicle..." onchange="updateVehicleId()">
                            <input type="hidden" id="vehicleId" name="vehicleId">
                            <datalist id="QuotationTransportationList"></datalist>
                        </div>
                    </div>
                </div>
    
                <!-- Modal Footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                </div>
    
                </div>
            </div>
        </div>
    </form>
    <h1>December 2023</h1>
    <table class="calendar">
        <thead>
            <tr>
                <th>SUNDAY</th>
                <th>MONDAY</th>
                <th>TUESDAY</th>
                <th>WEDNESDAY</th>
                <th>THURSDAY</th>
                <th>FRIDAY</th>
                <th>SATURDAY</th>
            </tr>
        </thead>
        <tbody id="calendar_days"></tbody>
    </table>
</div>
<script>
    function updateClientId() {
        var clientNameInput = document.getElementById('clientName');
        var clientIdInput = document.getElementById('clientId');
        var wasteNameInput = document.getElementById('wasteName');
        var wasteIdInput = document.getElementById('wasteId');

        // Find the selected option in the client datalist
        var selectedClientOption = document.querySelector('#clientList option[value="' + clientNameInput.value + '"]');

        // If a matching client option is found, update the clientIdInput value
        if (selectedClientOption) {
            clientIdInput.value = selectedClientOption.getAttribute('data-clientId');
            // Fetch and update the waste datalist based on the selected client
            updateWasteDatalist(clientIdInput.value);
            updateTransportationDatalist(clientIdInput.value);
        } else {
            // The entered value is not in the list
            clientIdInput.value = '';
            wasteNameInput.innerHTML = '<option value="" disabled selected>Select Waste</option>';
            wasteIdInput.value = '';

            // You can clear the input or display a message to the user
            clientNameInput.value = '';
            alert('Please select a client from the list.');
        }
    }

    function updateWasteId() {
        var wasteName = document.getElementById('wasteName');
        var wasteId = document.getElementById('wasteId');

        // Find the selected option in the waste datalist
        var selectedWasteOption = document.querySelector('#QuotationWasteList option[value="' + wasteName.value + '"]');

        // If a matching waste option is found, update the wasteId value
        if (selectedWasteOption) {
            wasteId.value = selectedWasteOption.getAttribute('data-wasteId');
        } else {
            // The entered value is not in the list
            wasteId.value = '';

            // You can clear the input or display a message to the user
            wasteName.value = '';
            alert('Please select a waste from the list.');
        }
    }

    function updateVehicleId() {
        var typeOfVehicle = document.getElementById('typeOfVehicle');
        var vehicleId = document.getElementById('vehicleId');

        // Find the selected option in the waste datalist
        var selectedWasteOption = document.querySelector('#QuotationTransportationList option[value="' + typeOfVehicle.value + '"]');

        // If a matching waste option is found, update the vehicleId value
        if (selectedWasteOption) {
            vehicleId.value = selectedWasteOption.getAttribute('data-vehicleId');
            console.log(vehicleId.value)
        } else {
            // The entered value is not in the list
            vehicleId.value = '';

            // You can clear the input or display a message to the user
            typeOfVehicle.value = '';
            alert('Please select a waste from the list.');
        }
    }

    function updateWasteDatalist(clientId) {
        // Replace the URL with the actual endpoint on your server
        const endpoint = `/dashboard/getQuotationWastesByClient?clientId=${clientId}`;
        fetch(endpoint)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(wastes => {
                // Update the QuotationWasteList datalist options accordingly
                const QuotationWasteList = document.getElementById('QuotationWasteList');
                const wasteNameInput = document.getElementById('wasteName');
                const wasteIdInput = document.getElementById('wasteId');

                // Clear existing options
                QuotationWasteList.innerHTML = '<option value="" disabled selected>Select Waste</option>';

                // Add new options based on the fetched data
                wastes.forEach(waste => {
                    const option = document.createElement('option');
                    option.value = waste.wasteName;
                    option.setAttribute('data-wasteId', waste.id);
                    QuotationWasteList.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error fetching wastes:', error);
            });
    }

    function updateTransportationDatalist(clientId) {
        // Replace the URL with the actual endpoint on your server
        const endpoint = `/dashboard/getQuotationTransportationByClient?clientId=${clientId}`;

        fetch(endpoint)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(transportation => {
                console.log(transportation)
                // Update the QuotationTransportationList datalist options accordingly
                const QuotationTransportationList = document.getElementById('QuotationTransportationList');
                const typeOfVehicle = document.getElementById('typeOfVehicle');
                const vehicleIdInput = document.getElementById('vehicleId');

                // Clear existing options
                QuotationTransportationList.innerHTML = '<option value="" disabled selected>Select Waste</option>';

                // Add new options based on the fetched data
                transportation.forEach(vehicle => {
                    const option = document.createElement('option');
                    option.value = vehicle.vehicleId;
                    option.setAttribute('data-vehicleId', vehicle.id);
                    QuotationTransportationList.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error fetching wastes:', error);
            });
    }

    // Add an event listener to the "Submit To" dropdown
    document.getElementById('submit_to').addEventListener('change', function () {
        // Get the selected value
        var selectedValue = this.value;

        // Get the row containing the "Type of Vehicle" dropdown
        var typeOfVehicleRow = document.getElementById('type_of_vehicle_row');

        // Toggle the visibility based on the selected value
        if (selectedValue === 'LOGISTICS') {
            typeOfVehicleRow.style.display = 'flex';
        } else {
            typeOfVehicleRow.style.display = 'none';
            console.log("none")
        }
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        generateCalendarDays(2023, 11);
    });

    function generateCalendarDays(year, month) {
        // const hauling_date = marketing_transaction_form.querySelector("#hauling_date");
        const calendar_days = document.getElementById("calendar_days")

        calendar_days.innerHTML = '';
        // Get the number of days in the month
        var daysInMonth = new Date(year, month + 1, 0).getDate();
    
        // Get the first day of the month (0 = Sunday, 1 = Monday, ..., 6 = Saturday)
        var firstDay = new Date(year, month, 1).getDay();
    
        // Initialize an array to store the day values
        var dayValues = [];
    
        // Generate day values
        for (var day = 1; day <= daysInMonth; day++) {
            dayValues.push(day);
        }
    
        // Generate the table rows
        var rows = Math.ceil((daysInMonth + firstDay) / 7);
    
        for (var i = 0; i < rows; i++) {
            var row = document.createElement("tr");
    
            for (var j = 0; j < 7; j++) {
                var cell = document.createElement("td");
                var index = i * 7 + j - firstDay;
    
                if (index >= 0 && index < daysInMonth) {
                    // Create a span for the day value
                    var div_element = document.createElement("div");
                    div_element.classList.add("td_header");
    
                    var daySpan = document.createElement("span");
                    daySpan.textContent = dayValues[index];
    
                    // Add a class to the td element based on the date
                    cell.classList.add("date-" + dayValues[index]);
    
                    // Create a button for booking
                    var bookButton = document.createElement("button");
                    bookButton.textContent = "Book";
                    // Set class for the "Book" button
                    bookButton.classList.add("py-0");
                    bookButton.classList.add("btn");
                    bookButton.classList.add("btn-success");
                    bookButton.classList.add("book-button");
                    // Set data-toggle and data-target attributes for Bootstrap modal
                    bookButton.setAttribute("data-toggle", "modal");
                    bookButton.setAttribute("data-target", "#myModal");

                    // Create a div for "Available slot"
                    var availableSlotDiv = document.createElement("div");
                    availableSlotDiv.textContent = "Available Vehicles:";
                    // Set class for the "Available slot" div
                    availableSlotDiv.classList.add("available_slot");

                    var total_vehicle_day = [];
                    var vehicle_type_day = [];
                    // for(let x = 1; x < vehicle_data_list.content.length; x++){
                    //     if(!vehicle_type_day.includes(vehicle_data_list.content[x][findTextInArray(vehicle_data_list, "CODE")])){
                    //         vehicle_type_day.push(vehicle_data_list.content[x][findTextInArray(vehicle_data_list, "CODE")])
                    //         total_vehicle_day[vehicle_data_list.content[x][findTextInArray(vehicle_data_list, "CODE")]] = 1;
                    //     }
                    //     else{
                    //         total_vehicle_day[vehicle_data_list.content[x][findTextInArray(vehicle_data_list, "CODE")]]++;
                    //     }
                    // }

                    var date_format = year + '-' + (month + 1).toString().padStart(2, "0") + '-' + (dayValues[index]).toString().padStart(2, "0");
                    
                    var booked_vehicle_day = [];
                    var booked_vehicle_type_day = [];
                    var book_logistics = 0
                    var book_receiving = 0
                    // for(let x = 1; x < mtf_data_list.content.length; x++){
                    //     if(date_format == date_decoder2(mtf_data_list.content[x][findTextInArray(mtf_data_list, "HAULING DATE")])){
                    //         if(mtf_data_list.content[x][findTextInArray(mtf_data_list, "SUBMIT TO")] == "LOGISTICS"){
                    //             var vehicle_code;
                    //             for(let y = 1; y < vehicle_data_list.content.length; y++){
                    //                 if(vehicle_data_list.content[y][findTextInArray(vehicle_data_list, "TYPE OF VEHICLE")] == mtf_data_list.content[x][findTextInArray(mtf_data_list, "TYPE OF VEHICLE")]){
                    //                     vehicle_code = vehicle_data_list.content[y][findTextInArray(vehicle_data_list, "CODE")]
                    //                     break
                    //                 }
                    //             }
                    //             if(!booked_vehicle_type_day.includes(vehicle_code)){
                    //                 booked_vehicle_type_day.push(vehicle_code)
                    //                 booked_vehicle_day[vehicle_code] = 1;
                    //             }
                    //             else{
                    //                 booked_vehicle_day[vehicle_code]++;
                    //             }
                    //             book_logistics += 1;
                    //         }
                    //         else if(mtf_data_list.content[x][findTextInArray(mtf_data_list, "SUBMIT TO")] == "RECEIVING"){
                    //             book_receiving += 1;
                    //         }
                    //     }
                    // }
                            
                    // Create a div for "Booked slot"
                    var bookSlotDiv = document.createElement("div");
                    bookSlotDiv.innerHTML = `Booked Transactions:<b>${book_logistics + book_receiving}</b><br>Logistics:<b>${book_logistics}</b> - Receiving:<b>${book_receiving}</b>`;
                    // Set class for the "Booked slot" div
                    bookSlotDiv.classList.add("book_slot");

                    var available_vehicle_div = document.createElement("div")
                    available_vehicle_div.classList.add("available_vehicle_class");
                    
                    // vehicle_type.forEach((data, index) => {
                    //     var vehicle_div = document.createElement("div");
                    //     vehicle_div.classList.add("vehicle_div");
                    //     var actual_count = 0;
                    //     if(total_vehicle[vehicle_type[index]] - booked_vehicle_day[vehicle_type[index]] < 0){
                    //         actual_count = total_vehicle[vehicle_type[index]];
                    //     }
                    //     if(total_vehicle[vehicle_type[index]] - booked_vehicle_day[vehicle_type[index]] >= 0){
                    //         actual_count = total_vehicle[vehicle_type[index]] - booked_vehicle_day[vehicle_type[index]];
                    //     }
                    //     else{
                    //         actual_count = total_vehicle[vehicle_type[index]]
                    //     }
                    //     vehicle_div.textContent = `${data} : ${actual_count}/${total_vehicle[vehicle_type[index]]}`
                    //     available_vehicle_div.appendChild(vehicle_div);
                    // })

                    // Append the day value, the button, and the "Available slot" div to the cell
                    div_element.appendChild(daySpan);
                    div_element.appendChild(bookButton);
                    cell.appendChild(div_element);
                    cell.appendChild(bookSlotDiv);
                    cell.appendChild(availableSlotDiv);
                    cell.appendChild(available_vehicle_div);
    
                    // Add click event listener to the "Book" button
                    bookButton.addEventListener("click", function (event) {
                        // Get the date from the clicked button's parent td element
                        var clickedDate = event.currentTarget.parentElement.querySelector('.td_header span').textContent;

                        // Format the date (assuming simple formatting for illustration purposes)
                        var formattedDate = year + '-' + (month + 1).toString().padStart(2, "0") + '-' + clickedDate.toString().padStart(2, "0");

                        // Set the hauling_date input value
                        document.getElementById("haulingDate").value = formattedDate;

                    });
                } else {
                    // Set background color to gray for cells without a number
                    cell.style.backgroundColor = 'gray';
                }
    
                row.appendChild(cell);
            }
    
            calendar_days.appendChild(row);
        }
    }
</script>